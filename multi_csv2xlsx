#!/cluster/biocompute/software/python/python-3.7.6/bin/python
# multi_csv2xlsx
"""
Create one xlsx file from multiple comma-separated-value files, with the option to remove columns.
"""

import argparse
import pandas as pd
import os
from pathlib import Path


def main(args):

    if Path(args.xlsx).is_file():
        print(f'Cowardly refusing to overwrite "{args.xlsx}". Exiting now.')
        exit()

    if not os.path.splitext(args.xlsx)[-1] == '.xlsx':
        print('Exiting because output spreadsheet name "{args.xlsx}" does '
              'not end in ".xlsx".'
              )

    # Create an Excel XLSX file writing object, using the first filename from the command line
    writer = pd.ExcelWriter(args.xlsx)

    # Create a sheet for each csv file
    for csv_file in args.csv_files:
        df = pd.read_csv(csv_file, sep=args.delimiter)  # read in delimited file

        if args.remove_cols:
            for column in args.remove_cols:
                df.pop(str(column))  # remove specified column

        # Write out current file as sheet
        df.to_excel(
            writer,
            # sheet has same name as file (without the extension)
            sheet_name=os.path.splitext(csv_file)[0],
            index=False                               # prevent column of row numbers
        )

    # Save and close final xlsx file containing one or more sheets
    writer.save()


# command line interface (making this a modulino)
if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description=__doc__
    )
    parser.add_argument(
        'xlsx',
        type=str,
        help='Name of xlsx file to create',
    )
    parser.add_argument(
        'csv_files',
        nargs='+',
        type=str,
        help='One or more csv files to add to spreadsheet',
    )
    parser.add_argument(
        '--remove-cols',
        nargs='+',
        type=str,
        help='One or more csv files to add to spreadsheet',
    )
    parser.add_argument(
        '--delimiter',
        type=str,
        default=",",
        help='Delimiter for input files (default: comma)',
    )

    # Capture the command line arguments
    args = parser.parse_args()

    # pass command line arguments to the main function
    main(args)
